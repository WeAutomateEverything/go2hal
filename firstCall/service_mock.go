// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package firstCall is a generated GoMock package.
package firstCall

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetFirstCall mocks base method
func (m *MockService) GetFirstCall(ctx context.Context, chat uint32) (string, string, error) {
	ret := m.ctrl.Call(m, "GetFirstCall", ctx, chat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFirstCall indicates an expected call of GetFirstCall
func (mr *MockServiceMockRecorder) GetFirstCall(ctx, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstCall", reflect.TypeOf((*MockService)(nil).GetFirstCall), ctx, chat)
}

// AddCalloutFunc mocks base method
func (m *MockService) AddCalloutFunc(function CalloutFunction) {
	m.ctrl.Call(m, "AddCalloutFunc", function)
}

// AddCalloutFunc indicates an expected call of AddCalloutFunc
func (mr *MockServiceMockRecorder) AddCalloutFunc(function interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCalloutFunc", reflect.TypeOf((*MockService)(nil).AddCalloutFunc), function)
}

// IsConfigured mocks base method
func (m *MockService) IsConfigured(chat uint32) bool {
	ret := m.ctrl.Call(m, "IsConfigured", chat)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfigured indicates an expected call of IsConfigured
func (mr *MockServiceMockRecorder) IsConfigured(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfigured", reflect.TypeOf((*MockService)(nil).IsConfigured), chat)
}

// MockCalloutFunction is a mock of CalloutFunction interface
type MockCalloutFunction struct {
	ctrl     *gomock.Controller
	recorder *MockCalloutFunctionMockRecorder
}

// MockCalloutFunctionMockRecorder is the mock recorder for MockCalloutFunction
type MockCalloutFunctionMockRecorder struct {
	mock *MockCalloutFunction
}

// NewMockCalloutFunction creates a new mock instance
func NewMockCalloutFunction(ctrl *gomock.Controller) *MockCalloutFunction {
	mock := &MockCalloutFunction{ctrl: ctrl}
	mock.recorder = &MockCalloutFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalloutFunction) EXPECT() *MockCalloutFunctionMockRecorder {
	return m.recorder
}

// GetFirstCallDetails mocks base method
func (m *MockCalloutFunction) GetFirstCallDetails(ctx context.Context, chat uint32) (string, string, error) {
	ret := m.ctrl.Call(m, "GetFirstCallDetails", ctx, chat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFirstCallDetails indicates an expected call of GetFirstCallDetails
func (mr *MockCalloutFunctionMockRecorder) GetFirstCallDetails(ctx, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstCallDetails", reflect.TypeOf((*MockCalloutFunction)(nil).GetFirstCallDetails), ctx, chat)
}

// Configured mocks base method
func (m *MockCalloutFunction) Configured(chat uint32) bool {
	ret := m.ctrl.Call(m, "Configured", chat)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Configured indicates an expected call of Configured
func (mr *MockCalloutFunctionMockRecorder) Configured(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configured", reflect.TypeOf((*MockCalloutFunction)(nil).Configured), chat)
}

// MockDefaultCalloutService is a mock of DefaultCalloutService interface
type MockDefaultCalloutService struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultCalloutServiceMockRecorder
}

// MockDefaultCalloutServiceMockRecorder is the mock recorder for MockDefaultCalloutService
type MockDefaultCalloutServiceMockRecorder struct {
	mock *MockDefaultCalloutService
}

// NewMockDefaultCalloutService creates a new mock instance
func NewMockDefaultCalloutService(ctrl *gomock.Controller) *MockDefaultCalloutService {
	mock := &MockDefaultCalloutService{ctrl: ctrl}
	mock.recorder = &MockDefaultCalloutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefaultCalloutService) EXPECT() *MockDefaultCalloutServiceMockRecorder {
	return m.recorder
}

// setDefaultCallout mocks base method
func (m *MockDefaultCalloutService) setDefaultCallout(ctx context.Context, chat uint32, number string) error {
	ret := m.ctrl.Call(m, "setDefaultCallout", ctx, chat, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// setDefaultCallout indicates an expected call of setDefaultCallout
func (mr *MockDefaultCalloutServiceMockRecorder) setDefaultCallout(ctx, chat, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDefaultCallout", reflect.TypeOf((*MockDefaultCalloutService)(nil).setDefaultCallout), ctx, chat, number)
}
