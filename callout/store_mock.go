// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package callout is a generated GoMock package.
package callout

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAck mocks base method
func (m *MockStore) AddAck(fields map[string]string, chat uint32, phone, name string) error {
	ret := m.ctrl.Call(m, "AddAck", fields, chat, phone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAck indicates an expected call of AddAck
func (mr *MockStoreMockRecorder) AddAck(fields, chat, phone, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAck", reflect.TypeOf((*MockStore)(nil).AddAck), fields, chat, phone, name)
}

// getAcks mocks base method
func (m *MockStore) getAcks() ([]ackRecord, error) {
	ret := m.ctrl.Call(m, "getAcks")
	ret0, _ := ret[0].([]ackRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAcks indicates an expected call of getAcks
func (mr *MockStoreMockRecorder) getAcks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAcks", reflect.TypeOf((*MockStore)(nil).getAcks))
}

// DeleteAck mocks base method
func (m *MockStore) DeleteAck(chat uint32) error {
	ret := m.ctrl.Call(m, "DeleteAck", chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAck indicates an expected call of DeleteAck
func (mr *MockStoreMockRecorder) DeleteAck(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAck", reflect.TypeOf((*MockStore)(nil).DeleteAck), chat)
}

// Bump mocks base method
func (m *MockStore) Bump(chat uint32) error {
	ret := m.ctrl.Call(m, "Bump", chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bump indicates an expected call of Bump
func (mr *MockStoreMockRecorder) Bump(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bump", reflect.TypeOf((*MockStore)(nil).Bump), chat)
}
