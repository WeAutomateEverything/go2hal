// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weAutomateEverything/go2hal/telegram (interfaces: Service)

// Package mock_telegram is a generated GoMock package.
package telegram

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// RegisterCommand mocks base method
func (m *MockService) RegisterCommand(arg0 Command) {
	m.ctrl.Call(m, "RegisterCommand", arg0)
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockServiceMockRecorder) RegisterCommand(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockService)(nil).RegisterCommand), arg0)
}

// RegisterCommandLet mocks base method
func (m *MockService) RegisterCommandLet(arg0 Commandlet) {
	m.ctrl.Call(m, "RegisterCommandLet", arg0)
}

// RegisterCommandLet indicates an expected call of RegisterCommandLet
func (mr *MockServiceMockRecorder) RegisterCommandLet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommandLet", reflect.TypeOf((*MockService)(nil).RegisterCommandLet), arg0)
}

// SendDocumentToGroup mocks base method
func (m *MockService) SendDocumentToGroup(arg0 context.Context, arg1 []byte, arg2 string, arg3 int64) error {
	ret := m.ctrl.Call(m, "SendDocumentToGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDocumentToGroup indicates an expected call of SendDocumentToGroup
func (mr *MockServiceMockRecorder) SendDocumentToGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDocumentToGroup", reflect.TypeOf((*MockService)(nil).SendDocumentToGroup), arg0, arg1, arg2, arg3)
}

// SendImageToGroup mocks base method
func (m *MockService) SendImageToGroup(arg0 context.Context, arg1 []byte, arg2 int64) error {
	ret := m.ctrl.Call(m, "SendImageToGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendImageToGroup indicates an expected call of SendImageToGroup
func (mr *MockServiceMockRecorder) SendImageToGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImageToGroup", reflect.TypeOf((*MockService)(nil).SendImageToGroup), arg0, arg1, arg2)
}

// SendKeyboard mocks base method
func (m *MockService) SendKeyboard(arg0 context.Context, arg1 []string, arg2 string, arg3 int64) (int, error) {
	ret := m.ctrl.Call(m, "SendKeyboard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendKeyboard indicates an expected call of SendKeyboard
func (mr *MockServiceMockRecorder) SendKeyboard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKeyboard", reflect.TypeOf((*MockService)(nil).SendKeyboard), arg0, arg1, arg2, arg3)
}

// SendMessage mocks base method
func (m *MockService) SendMessage(arg0 context.Context, arg1 int64, arg2 string, arg3 int) (int, error) {
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockServiceMockRecorder) SendMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), arg0, arg1, arg2, arg3)
}

// SendMessagePlainText mocks base method
func (m *MockService) SendMessagePlainText(arg0 context.Context, arg1 int64, arg2 string, arg3 int) (int, error) {
	ret := m.ctrl.Call(m, "SendMessagePlainText", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessagePlainText indicates an expected call of SendMessagePlainText
func (mr *MockServiceMockRecorder) SendMessagePlainText(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessagePlainText", reflect.TypeOf((*MockService)(nil).SendMessagePlainText), arg0, arg1, arg2, arg3)
}

// SendMessageWithCorrelation mocks base method
func (m *MockService) SendMessageWithCorrelation(arg0 context.Context, arg1 int64, arg2 string, arg3 int, arg4 string) (int, error) {
	ret := m.ctrl.Call(m, "SendMessageWithCorrelation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageWithCorrelation indicates an expected call of SendMessageWithCorrelation
func (mr *MockServiceMockRecorder) SendMessageWithCorrelation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithCorrelation", reflect.TypeOf((*MockService)(nil).SendMessageWithCorrelation), arg0, arg1, arg2, arg3, arg4)
}

// pollAuthorisation mocks base method
func (m *MockService) pollAuthorisation(arg0 string) (uint32, error) {
	ret := m.ctrl.Call(m, "pollAuthorisation", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// pollAuthorisation indicates an expected call of pollAuthorisation
func (mr *MockServiceMockRecorder) pollAuthorisation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pollAuthorisation", reflect.TypeOf((*MockService)(nil).pollAuthorisation), arg0)
}

// requestAuthorisation mocks base method
func (m *MockService) requestAuthorisation(arg0 context.Context, arg1 uint32, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "requestAuthorisation", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// requestAuthorisation indicates an expected call of requestAuthorisation
func (mr *MockServiceMockRecorder) requestAuthorisation(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "requestAuthorisation", reflect.TypeOf((*MockService)(nil).requestAuthorisation), arg0, arg1, arg2)
}
