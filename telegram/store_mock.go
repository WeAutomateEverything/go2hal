// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_telegram is a generated GoMock package.
package telegram

import (
	gomock "github.com/golang/mock/gomock"
	bson "gopkg.in/mgo.v2/bson"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// SetState mocks base method
func (m *MockStore) SetState(user int, chat int64, state string, field []string) error {
	ret := m.ctrl.Call(m, "SetState", user, chat, state, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState
func (mr *MockStoreMockRecorder) SetState(user, chat, state, field interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStore)(nil).SetState), user, chat, state, field)
}

// getState mocks base method
func (m *MockStore) getState(user int, chat int64) State {
	ret := m.ctrl.Call(m, "getState", user, chat)
	ret0, _ := ret[0].(State)
	return ret0
}

// getState indicates an expected call of getState
func (mr *MockStoreMockRecorder) getState(user, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getState", reflect.TypeOf((*MockStore)(nil).getState), user, chat)
}

// addBot mocks base method
func (m *MockStore) addBot(chat int64, name string) (uint32, error) {
	ret := m.ctrl.Call(m, "addBot", chat, name)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addBot indicates an expected call of addBot
func (mr *MockStoreMockRecorder) addBot(chat, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addBot", reflect.TypeOf((*MockStore)(nil).addBot), chat, name)
}

// GetRoomKey mocks base method
func (m *MockStore) GetRoomKey(chat uint32) (int64, error) {
	ret := m.ctrl.Call(m, "GetRoomKey", chat)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomKey indicates an expected call of GetRoomKey
func (mr *MockStoreMockRecorder) GetRoomKey(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomKey", reflect.TypeOf((*MockStore)(nil).GetRoomKey), chat)
}

// GetUUID mocks base method
func (m *MockStore) GetUUID(chat int64, name string) (uint32, error) {
	ret := m.ctrl.Call(m, "GetUUID", chat, name)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID
func (mr *MockStoreMockRecorder) GetUUID(chat, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockStore)(nil).GetUUID), chat, name)
}

// newAuthRequest mocks base method
func (m *MockStore) newAuthRequest(msgid int, chat int64, name string) (string, error) {
	ret := m.ctrl.Call(m, "newAuthRequest", msgid, chat, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newAuthRequest indicates an expected call of newAuthRequest
func (mr *MockStoreMockRecorder) newAuthRequest(msgid, chat, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newAuthRequest", reflect.TypeOf((*MockStore)(nil).newAuthRequest), msgid, chat, name)
}

// approveAuthRequest mocks base method
func (m *MockStore) approveAuthRequest(id int, chat int64, approvedByName string, approvedById int) error {
	ret := m.ctrl.Call(m, "approveAuthRequest", id, chat, approvedByName, approvedById)
	ret0, _ := ret[0].(error)
	return ret0
}

// approveAuthRequest indicates an expected call of approveAuthRequest
func (mr *MockStoreMockRecorder) approveAuthRequest(id, chat, approvedByName, approvedById interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "approveAuthRequest", reflect.TypeOf((*MockStore)(nil).approveAuthRequest), id, chat, approvedByName, approvedById)
}

// useToken mocks base method
func (m *MockStore) useToken(id string) (int64, error) {
	ret := m.ctrl.Call(m, "useToken", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// useToken indicates an expected call of useToken
func (mr *MockStoreMockRecorder) useToken(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "useToken", reflect.TypeOf((*MockStore)(nil).useToken), id)
}

// saveMessageCorrelation mocks base method
func (m *MockStore) saveMessageCorrelation(chat int64, message int, correlationId string) error {
	ret := m.ctrl.Call(m, "saveMessageCorrelation", chat, message, correlationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveMessageCorrelation indicates an expected call of saveMessageCorrelation
func (mr *MockStoreMockRecorder) saveMessageCorrelation(chat, message, correlationId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveMessageCorrelation", reflect.TypeOf((*MockStore)(nil).saveMessageCorrelation), chat, message, correlationId)
}

// getCorrelationId mocks base method
func (m *MockStore) getCorrelationId(chat int64, message int) (string, error) {
	ret := m.ctrl.Call(m, "getCorrelationId", chat, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCorrelationId indicates an expected call of getCorrelationId
func (mr *MockStoreMockRecorder) getCorrelationId(chat, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCorrelationId", reflect.TypeOf((*MockStore)(nil).getCorrelationId), chat, message)
}

// SaveReply mocks base method
func (m *MockStore) SaveReply(chat int64, message, correlationId string) error {
	ret := m.ctrl.Call(m, "SaveReply", chat, message, correlationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveReply indicates an expected call of SaveReply
func (mr *MockStoreMockRecorder) SaveReply(chat, message, correlationId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReply", reflect.TypeOf((*MockStore)(nil).SaveReply), chat, message, correlationId)
}

// GetReplies mocks base method
func (m *MockStore) GetReplies() ([]Replies, error) {
	ret := m.ctrl.Call(m, "GetReplies")
	ret0, _ := ret[0].([]Replies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies
func (mr *MockStoreMockRecorder) GetReplies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockStore)(nil).GetReplies))
}

// AcknowledgeReply mocks base method
func (m *MockStore) AcknowledgeReply(id bson.ObjectId) error {
	ret := m.ctrl.Call(m, "AcknowledgeReply", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcknowledgeReply indicates an expected call of AcknowledgeReply
func (mr *MockStoreMockRecorder) AcknowledgeReply(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeReply", reflect.TypeOf((*MockStore)(nil).AcknowledgeReply), id)
}
