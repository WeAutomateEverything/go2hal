// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package halaws is a generated GoMock package.
package halaws

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SendAlert mocks base method
func (m *MockService) SendAlert(ctx context.Context, chatId uint32, destination, name string, variables map[string]string) error {
	ret := m.ctrl.Call(m, "SendAlert", ctx, chatId, destination, name, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAlert indicates an expected call of SendAlert
func (mr *MockServiceMockRecorder) SendAlert(ctx, chatId, destination, name, variables interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlert", reflect.TypeOf((*MockService)(nil).SendAlert), ctx, chatId, destination, name, variables)
}

// ResetLastCall mocks base method
func (m *MockService) ResetLastCall(chat uint32) {
	m.ctrl.Call(m, "ResetLastCall", chat)
}

// ResetLastCall indicates an expected call of ResetLastCall
func (mr *MockServiceMockRecorder) ResetLastCall(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLastCall", reflect.TypeOf((*MockService)(nil).ResetLastCall), chat)
}
