// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weAutomateEverything/go2hal/alert (interfaces: Service)

// Package mock_alert is a generated GoMock package.
package alert

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SendAlert mocks base method
func (m *MockService) SendAlert(arg0 context.Context, arg1 uint32, arg2 string) error {
	ret := m.ctrl.Call(m, "SendAlert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAlert indicates an expected call of SendAlert
func (mr *MockServiceMockRecorder) SendAlert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlert", reflect.TypeOf((*MockService)(nil).SendAlert), arg0, arg1, arg2)
}

// SendAlertWithReply mocks base method
func (m *MockService) SendAlertWithReply(arg0 context.Context, arg1 uint32, arg2, arg3 string) (int, error) {
	ret := m.ctrl.Call(m, "SendAlertWithReply", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAlertWithReply indicates an expected call of SendAlertWithReply
func (mr *MockServiceMockRecorder) SendAlertWithReply(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlertWithReply", reflect.TypeOf((*MockService)(nil).SendAlertWithReply), arg0, arg1, arg2, arg3)
}

// SendDocumentToAlertGroup mocks base method
func (m *MockService) SendDocumentToAlertGroup(arg0 context.Context, arg1 uint32, arg2 []byte, arg3 string) error {
	ret := m.ctrl.Call(m, "SendDocumentToAlertGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDocumentToAlertGroup indicates an expected call of SendDocumentToAlertGroup
func (mr *MockServiceMockRecorder) SendDocumentToAlertGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDocumentToAlertGroup", reflect.TypeOf((*MockService)(nil).SendDocumentToAlertGroup), arg0, arg1, arg2, arg3)
}

// SendError mocks base method
func (m *MockService) SendError(arg0 context.Context, arg1 error) error {
	ret := m.ctrl.Call(m, "SendError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendError indicates an expected call of SendError
func (mr *MockServiceMockRecorder) SendError(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockService)(nil).SendError), arg0, arg1)
}

// SendErrorImage mocks base method
func (m *MockService) SendErrorImage(arg0 context.Context, arg1 []byte) error {
	ret := m.ctrl.Call(m, "SendErrorImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendErrorImage indicates an expected call of SendErrorImage
func (mr *MockServiceMockRecorder) SendErrorImage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorImage", reflect.TypeOf((*MockService)(nil).SendErrorImage), arg0, arg1)
}

// SendImageToAlertGroup mocks base method
func (m *MockService) SendImageToAlertGroup(arg0 context.Context, arg1 uint32, arg2 []byte) error {
	ret := m.ctrl.Call(m, "SendImageToAlertGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendImageToAlertGroup indicates an expected call of SendImageToAlertGroup
func (mr *MockServiceMockRecorder) SendImageToAlertGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImageToAlertGroup", reflect.TypeOf((*MockService)(nil).SendImageToAlertGroup), arg0, arg1, arg2)
}
