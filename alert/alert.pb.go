// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alert.proto

/*
Package alert is a generated protocol buffer package.

It is generated from these files:
	alert.proto

It has these top-level messages:
	AlertRequest
	AlertReply
*/
package alert

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AlertRequest struct {
	GroupID       int64  `protobuf:"varint,1,opt,name=GroupID" json:"GroupID,omitempty"`
	CorrelationId string `protobuf:"bytes,2,opt,name=CorrelationId" json:"CorrelationId,omitempty"`
	Message       string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
}

func (m *AlertRequest) Reset()                    { *m = AlertRequest{} }
func (m *AlertRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertRequest) ProtoMessage()               {}
func (*AlertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AlertRequest) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AlertRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *AlertRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AlertReply struct {
	CorrelationId string `protobuf:"bytes,1,opt,name=CorrelationId" json:"CorrelationId,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *AlertReply) Reset()                    { *m = AlertReply{} }
func (m *AlertReply) String() string            { return proto.CompactTextString(m) }
func (*AlertReply) ProtoMessage()               {}
func (*AlertReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlertReply) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *AlertReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*AlertRequest)(nil), "alert.AlertRequest")
	proto.RegisterType((*AlertReply)(nil), "alert.AlertReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Alert service

type AlertClient interface {
	RequestReply(ctx context.Context, opts ...grpc.CallOption) (Alert_RequestReplyClient, error)
}

type alertClient struct {
	cc *grpc.ClientConn
}

func NewAlertClient(cc *grpc.ClientConn) AlertClient {
	return &alertClient{cc}
}

func (c *alertClient) RequestReply(ctx context.Context, opts ...grpc.CallOption) (Alert_RequestReplyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Alert_serviceDesc.Streams[0], c.cc, "/alert.Alert/RequestReply", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertRequestReplyClient{stream}
	return x, nil
}

type Alert_RequestReplyClient interface {
	Send(*AlertRequest) error
	Recv() (*AlertReply, error)
	grpc.ClientStream
}

type alertRequestReplyClient struct {
	grpc.ClientStream
}

func (x *alertRequestReplyClient) Send(m *AlertRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *alertRequestReplyClient) Recv() (*AlertReply, error) {
	m := new(AlertReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Alert service

type AlertServer interface {
	RequestReply(Alert_RequestReplyServer) error
}

func RegisterAlertServer(s *grpc.Server, srv AlertServer) {
	s.RegisterService(&_Alert_serviceDesc, srv)
}

func _Alert_RequestReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlertServer).RequestReply(&alertRequestReplyServer{stream})
}

type Alert_RequestReplyServer interface {
	Send(*AlertReply) error
	Recv() (*AlertRequest, error)
	grpc.ServerStream
}

type alertRequestReplyServer struct {
	grpc.ServerStream
}

func (x *alertRequestReplyServer) Send(m *AlertReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *alertRequestReplyServer) Recv() (*AlertRequest, error) {
	m := new(AlertRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Alert_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alert.Alert",
	HandlerType: (*AlertServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestReply",
			Handler:       _Alert_RequestReply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "alert.proto",
}

func init() { proto.RegisterFile("alert.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xcc, 0x49, 0x2d,
	0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x32, 0xb8, 0x78, 0x1c,
	0x41, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x09, 0x2e, 0x76, 0xf7, 0xa2, 0xfc,
	0xd2, 0x02, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x18, 0x57, 0x48, 0x85, 0x8b,
	0xd7, 0x39, 0xbf, 0xa8, 0x28, 0x35, 0x27, 0xb1, 0x24, 0x33, 0x3f, 0xcf, 0x33, 0x45, 0x82, 0x49,
	0x81, 0x51, 0x83, 0x33, 0x08, 0x55, 0x10, 0xa4, 0xdf, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55,
	0x82, 0x19, 0x2c, 0x0f, 0xe3, 0x2a, 0xf9, 0x70, 0x71, 0x41, 0x6d, 0x2a, 0xc8, 0xa9, 0xc4, 0x34,
	0x8d, 0x91, 0x80, 0x69, 0x4c, 0x28, 0xa6, 0x19, 0xb9, 0x72, 0xb1, 0x82, 0x4d, 0x13, 0xb2, 0xe1,
	0xe2, 0x81, 0xba, 0x1d, 0x62, 0xb0, 0xb0, 0x1e, 0xc4, 0x97, 0xc8, 0xbe, 0x92, 0x12, 0x44, 0x15,
	0x2c, 0xc8, 0xa9, 0x54, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x07, 0x86, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0xe2, 0xf6, 0xfe, 0x1b, 0x01, 0x00, 0x00,
}
