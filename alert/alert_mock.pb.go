// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weAutomateEverything/go2hal/alert (interfaces: Alert_RequestReplyServer)

// Package mock_alert is a generated GoMock package.
package alert

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockAlert_RequestReplyServer is a mock of Alert_RequestReplyServer interface
type MockAlert_RequestReplyServer struct {
	ctrl     *gomock.Controller
	recorder *MockAlert_RequestReplyServerMockRecorder
}

// MockAlert_RequestReplyServerMockRecorder is the mock recorder for MockAlert_RequestReplyServer
type MockAlert_RequestReplyServerMockRecorder struct {
	mock *MockAlert_RequestReplyServer
}

// NewMockAlert_RequestReplyServer creates a new mock instance
func NewMockAlert_RequestReplyServer(ctrl *gomock.Controller) *MockAlert_RequestReplyServer {
	mock := &MockAlert_RequestReplyServer{ctrl: ctrl}
	mock.recorder = &MockAlert_RequestReplyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlert_RequestReplyServer) EXPECT() *MockAlert_RequestReplyServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockAlert_RequestReplyServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockAlert_RequestReplyServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).Context))
}

// Recv mocks base method
func (m *MockAlert_RequestReplyServer) Recv() (*AlertRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AlertRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockAlert_RequestReplyServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockAlert_RequestReplyServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockAlert_RequestReplyServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockAlert_RequestReplyServer) Send(arg0 *AlertReply) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockAlert_RequestReplyServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockAlert_RequestReplyServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockAlert_RequestReplyServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockAlert_RequestReplyServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockAlert_RequestReplyServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockAlert_RequestReplyServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockAlert_RequestReplyServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockAlert_RequestReplyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockAlert_RequestReplyServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAlert_RequestReplyServer)(nil).SetTrailer), arg0)
}
